// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace _4._Infraestructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.ApplicationModels.Privileges", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Core.Domain.ApplicationModels.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("Core.Domain.ApplicationModels.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasAnnotation("DefaultValueSql", true);

                    b.Property<bool>("CommunityBanned")
                        .HasColumnType("boolean");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Idioma")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Core.Domain.ApplicationModels.UsersPrivileges", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.AdquisicionModel", b =>
                {
                    b.Property<int>("Adquisicion_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Adquisicion_id"));

                    b.Property<int?>("CantidadLogros")
                        .HasColumnType("integer");

                    b.Property<int>("TiempoJuego")
                        .HasColumnType("integer");

                    b.Property<int?>("TiempoJuegoReciente")
                        .HasColumnType("integer");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Videojuego_ID")
                        .HasColumnType("integer");

                    b.HasKey("Adquisicion_id");

                    b.HasIndex("User_ID");

                    b.HasIndex("Videojuego_ID");

                    b.ToTable("Adquisicion", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.ComentarioModel", b =>
                {
                    b.Property<int>("Comentario_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Comentario_ID"));

                    b.Property<int?>("ComentarioPadre_ID")
                        .HasColumnType("integer");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Foro_ID")
                        .HasColumnType("integer");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Comentario_ID");

                    b.HasIndex("ComentarioPadre_ID");

                    b.HasIndex("Foro_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Comentario", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.EstiloModel", b =>
                {
                    b.Property<int>("Estilo_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Estilo_ID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Estilo_ID");

                    b.ToTable("Estilo", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.ForoModel", b =>
                {
                    b.Property<int>("Foro_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Foro_ID"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Videojuego_ID")
                        .HasColumnType("integer");

                    b.HasKey("Foro_ID");

                    b.HasIndex("User_ID");

                    b.HasIndex("Videojuego_ID");

                    b.ToTable("Foro", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.ForoUsuarioFavoritoModel", b =>
                {
                    b.Property<string>("User_ID")
                        .HasColumnType("text");

                    b.Property<int>("Foro_ID")
                        .HasColumnType("integer");

                    b.HasKey("User_ID", "Foro_ID");

                    b.HasIndex("Foro_ID");

                    b.ToTable("ForoUsuarioFavorito", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.ForoUsuarioVisitaModel", b =>
                {
                    b.Property<string>("User_ID")
                        .HasColumnType("text");

                    b.Property<int>("Foro_ID")
                        .HasColumnType("integer");

                    b.HasKey("User_ID", "Foro_ID");

                    b.HasIndex("Foro_ID");

                    b.ToTable("ForoUsuarioVisita", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.GeneroModel", b =>
                {
                    b.Property<int>("Genero_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Genero_ID"));

                    b.Property<int>("GenreRawgID")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Genero_ID");

                    b.ToTable("Genero", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.LogTableModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.Property<string>("LogEvent")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int?>("ReferenceNumber")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceType")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("LogTable", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.MedioDePagoModel", b =>
                {
                    b.Property<int>("Medio_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Medio_ID"));

                    b.Property<int>("Cod_Postal")
                        .HasColumnType("integer");

                    b.Property<int>("Cod_Verificador")
                        .HasColumnType("integer");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<int>("Numero")
                        .HasColumnType("integer");

                    b.Property<int>("TipoPago_ID")
                        .HasColumnType("integer");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Medio_ID");

                    b.HasIndex("TipoPago_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("MedioDePago", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.NovedadModel", b =>
                {
                    b.Property<int>("Novedad_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Novedad_ID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Videojuego_ID")
                        .HasColumnType("integer");

                    b.HasKey("Novedad_ID");

                    b.HasIndex("Videojuego_ID");

                    b.ToTable("Novedad", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.PlataformaModel", b =>
                {
                    b.Property<int>("Plataforma_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Plataforma_ID"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlatformRawgID")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Plataforma_ID");

                    b.ToTable("Plataforma", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.PuntuacionModel", b =>
                {
                    b.Property<int>("Puntuacion_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Puntuacion_ID"));

                    b.Property<int>("Comentario_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Puntaje")
                        .HasColumnType("integer");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Puntuacion_ID");

                    b.HasIndex("Comentario_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Puntuacion", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.RatingModel", b =>
                {
                    b.Property<int>("Rating_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Rating_ID"));

                    b.Property<int>("CantidadVotos")
                        .HasColumnType("integer");

                    b.Property<double>("Porcentaje")
                        .HasColumnType("double precision");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Videojuego_ID")
                        .HasColumnType("integer");

                    b.HasKey("Rating_ID");

                    b.HasIndex("Videojuego_ID");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.RecomendacionUsuarioModel", b =>
                {
                    b.Property<int>("RecomendacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RecomendacionId"));

                    b.Property<DateTime>("FechaRecomendacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Frecuencia")
                        .HasColumnType("integer");

                    b.Property<string>("TipoRecomendacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VideojuegoRecomendadoId")
                        .HasColumnType("integer");

                    b.HasKey("RecomendacionId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideojuegoRecomendadoId");

                    b.ToTable("RecomendacionUsuario", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.RecomendacionVideojuegoModel", b =>
                {
                    b.Property<int>("RecomendacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RecomendacionId"));

                    b.Property<DateTime>("FechaRecomendacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Similitud")
                        .HasColumnType("double precision");

                    b.Property<string>("TipoRecomendacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VideojuegoRecomendadoId")
                        .HasColumnType("integer");

                    b.Property<int>("VideojuegoReferenciaId")
                        .HasColumnType("integer");

                    b.HasKey("RecomendacionId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideojuegoRecomendadoId");

                    b.HasIndex("VideojuegoReferenciaId");

                    b.ToTable("RecomendacionVideojuego", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.ReseñaModel", b =>
                {
                    b.Property<int>("Reseña_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Reseña_ID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Videojuego_ID")
                        .HasColumnType("integer");

                    b.HasKey("Reseña_ID");

                    b.HasIndex("Videojuego_ID");

                    b.ToTable("Reseña", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.SteamAccountModel", b =>
                {
                    b.Property<int>("SteamAccount_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SteamAccount_ID"));

                    b.Property<string>("ApiKey")
                        .HasColumnType("text");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("avatarfull")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("personaname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("profileurl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("steamid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SteamAccount_ID");

                    b.HasIndex("User_ID")
                        .IsUnique();

                    b.ToTable("SteamAccount", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.SuscripcionModel", b =>
                {
                    b.Property<int>("Suscripcion_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Suscripcion_ID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Suscripcion_ID");

                    b.ToTable("Suscripcion", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.SuscripcionUsuarioModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Suscripcion_ID")
                        .HasColumnType("integer");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("Suscripcion_ID");

                    b.HasIndex("User_ID")
                        .IsUnique();

                    b.ToTable("SuscripcionUsuario", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.TagModel", b =>
                {
                    b.Property<int>("Tag_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Tag_ID"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TagRawgId")
                        .HasColumnType("integer");

                    b.HasKey("Tag_ID");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.TiempoDeJuegoModel", b =>
                {
                    b.Property<int>("Tiempo_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Tiempo_ID"));

                    b.Property<int>("CantidadMinutos")
                        .HasColumnType("integer");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Videojuego_ID")
                        .HasColumnType("integer");

                    b.HasKey("Tiempo_ID");

                    b.HasIndex("User_ID");

                    b.HasIndex("Videojuego_ID");

                    b.ToTable("TiempoDeJuego", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.TiendaModel", b =>
                {
                    b.Property<int>("Tienda_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Tienda_ID"));

                    b.Property<string>("Dominio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StoreRawgId")
                        .HasColumnType("integer");

                    b.HasKey("Tienda_ID");

                    b.ToTable("Tienda", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.TipoPagoModel", b =>
                {
                    b.Property<int>("TipoPago_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TipoPago_ID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("TipoPago_ID");

                    b.ToTable("TipoPago", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.TrofeoModel", b =>
                {
                    b.Property<int>("Trofeo_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Trofeo_ID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Videojuego_ID")
                        .HasColumnType("integer");

                    b.HasKey("Trofeo_ID");

                    b.HasIndex("User_ID");

                    b.HasIndex("Videojuego_ID");

                    b.ToTable("Trofeo", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.UsuarioBaneadoModel", b =>
                {
                    b.Property<int>("Baneo_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Baneo_ID"));

                    b.Property<DateTime>("FechaDeBaneo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserAdmin_ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Baneo_ID");

                    b.HasIndex("UserAdmin_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("UsuarioBaneado", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.UsuarioJuegoPerfilModel", b =>
                {
                    b.Property<int>("Perfil_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Perfil_ID"));

                    b.Property<int?>("ClusterID")
                        .HasColumnType("integer");

                    b.Property<string>("GameGenresJson")
                        .HasColumnType("text");

                    b.Property<string>("GameHistoryJson")
                        .HasColumnType("text");

                    b.Property<string>("GameTagsJson")
                        .HasColumnType("text");

                    b.Property<string>("TipoRecomendacion")
                        .HasColumnType("text");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Perfil_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("UsuarioJuegoPerfil", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.UsuarioVisitaModel", b =>
                {
                    b.Property<int>("Visita_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Visita_ID"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Videojuego_ID")
                        .HasColumnType("integer");

                    b.HasKey("Visita_ID");

                    b.HasIndex("User_ID");

                    b.HasIndex("Videojuego_ID");

                    b.ToTable("UsuarioVisita", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.ValoracionModel", b =>
                {
                    b.Property<int>("Valoracion_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Valoracion_ID"));

                    b.Property<int>("Puntuacion")
                        .HasColumnType("integer");

                    b.Property<int>("Videojuego_ID")
                        .HasColumnType("integer");

                    b.HasKey("Valoracion_ID");

                    b.HasIndex("Videojuego_ID");

                    b.ToTable("Valoracion", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.VideojuegoEstiloModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("Estilo_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Videojuego_ID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("Estilo_ID");

                    b.HasIndex("Videojuego_ID");

                    b.ToTable("VideojuegoEstilo", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.VideojuegoGeneroModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("Genero_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Videojuego_ID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("Genero_ID");

                    b.HasIndex("Videojuego_ID");

                    b.ToTable("VideojuegoGenero", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.VideojuegoInteresModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Videojuego_ID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("User_ID");

                    b.HasIndex("Videojuego_ID");

                    b.ToTable("VideojuegoInteres", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.VideojuegoModel", b =>
                {
                    b.Property<int>("Videojuego_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Videojuego_ID"));

                    b.Property<int>("AppRawgId")
                        .HasColumnType("integer");

                    b.Property<string>("CaracteristicasVector")
                        .HasColumnType("text");

                    b.Property<int?>("ClusterID")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaSalida")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Imagen")
                        .HasColumnType("text");

                    b.Property<int?>("Metacritic")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Videojuego_ID");

                    b.ToTable("Videojuego", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.VideojuegoPlataformaModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("Plataforma_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Videojuego_ID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("Plataforma_ID");

                    b.HasIndex("Videojuego_ID");

                    b.ToTable("VideojuegoPlataforma", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.VideojuegoTagModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("Tag_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Videojuego_ID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("Tag_ID");

                    b.HasIndex("Videojuego_ID");

                    b.ToTable("VideojuegoTag", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.VideojuegoTiendaModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("Tienda_ID")
                        .HasColumnType("integer");

                    b.Property<int>("Videojuego_ID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("Tienda_ID");

                    b.HasIndex("Videojuego_ID");

                    b.ToTable("VideojuegoTienda", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("PrivilegeClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Domain.ApplicationModels.RefreshToken", b =>
                {
                    b.HasOne("Core.Domain.ApplicationModels.Users", "Users")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Domain.ApplicationModels.UsersPrivileges", b =>
                {
                    b.HasOne("Core.Domain.ApplicationModels.Privileges", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.ApplicationModels.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Models.AdquisicionModel", b =>
                {
                    b.HasOne("Core.Domain.ApplicationModels.Users", "usuario")
                        .WithMany("adquicionesModel")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.VideojuegoModel", "videojuego")
                        .WithMany("adquisicionesModel")
                        .HasForeignKey("Videojuego_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario");

                    b.Navigation("videojuego");
                });

            modelBuilder.Entity("Core.Domain.Models.ComentarioModel", b =>
                {
                    b.HasOne("Core.Domain.Models.ComentarioModel", "comentarioPadre")
                        .WithMany("comentarioModels")
                        .HasForeignKey("ComentarioPadre_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Domain.Models.ForoModel", "foro")
                        .WithMany("comentarioModels")
                        .HasForeignKey("Foro_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.ApplicationModels.Users", "usuario")
                        .WithMany("comentarioModels")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("comentarioPadre");

                    b.Navigation("foro");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Core.Domain.Models.ForoModel", b =>
                {
                    b.HasOne("Core.Domain.ApplicationModels.Users", "usuario")
                        .WithMany("foroModels")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.VideojuegoModel", "videojuego")
                        .WithMany("foroModels")
                        .HasForeignKey("Videojuego_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario");

                    b.Navigation("videojuego");
                });

            modelBuilder.Entity("Core.Domain.Models.ForoUsuarioFavoritoModel", b =>
                {
                    b.HasOne("Core.Domain.Models.ForoModel", "foro")
                        .WithMany("foroUsuarioFavoritoModels")
                        .HasForeignKey("Foro_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.ApplicationModels.Users", "usuario")
                        .WithMany("foroUsuarioFavoritoModels")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("foro");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Core.Domain.Models.ForoUsuarioVisitaModel", b =>
                {
                    b.HasOne("Core.Domain.Models.ForoModel", "foro")
                        .WithMany("foroUsuarioVisitaModels")
                        .HasForeignKey("Foro_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.ApplicationModels.Users", "usuario")
                        .WithMany("foroUsuarioVisitaModels")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("foro");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Core.Domain.Models.MedioDePagoModel", b =>
                {
                    b.HasOne("Core.Domain.Models.TipoPagoModel", "tipoPago")
                        .WithMany("_mediosPagoModel")
                        .HasForeignKey("TipoPago_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.ApplicationModels.Users", "usuario")
                        .WithMany("medioDePagoModels")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tipoPago");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Core.Domain.Models.NovedadModel", b =>
                {
                    b.HasOne("Core.Domain.Models.VideojuegoModel", "Videojuego")
                        .WithMany("novedadModels")
                        .HasForeignKey("Videojuego_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Videojuego");
                });

            modelBuilder.Entity("Core.Domain.Models.PuntuacionModel", b =>
                {
                    b.HasOne("Core.Domain.Models.ComentarioModel", "comentario")
                        .WithMany("puntuacionModels")
                        .HasForeignKey("Comentario_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.ApplicationModels.Users", "usuario")
                        .WithMany("puntuacionModels")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("comentario");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Core.Domain.Models.RatingModel", b =>
                {
                    b.HasOne("Core.Domain.Models.VideojuegoModel", "Videojuego")
                        .WithMany("ratingModels")
                        .HasForeignKey("Videojuego_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Videojuego");
                });

            modelBuilder.Entity("Core.Domain.Models.RecomendacionUsuarioModel", b =>
                {
                    b.HasOne("Core.Domain.ApplicationModels.Users", "usuario")
                        .WithMany("recomendacionUsuarioModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.VideojuegoModel", "videojuego")
                        .WithMany("recomendacionUsuarioModels")
                        .HasForeignKey("VideojuegoRecomendadoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("usuario");

                    b.Navigation("videojuego");
                });

            modelBuilder.Entity("Core.Domain.Models.RecomendacionVideojuegoModel", b =>
                {
                    b.HasOne("Core.Domain.ApplicationModels.Users", "usuario")
                        .WithMany("recomendacionVideojuegoModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.VideojuegoModel", "videojuegoRecomendado")
                        .WithMany("recomendacionVideojuegoRecModels")
                        .HasForeignKey("VideojuegoRecomendadoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.VideojuegoModel", "videojuegoReferencia")
                        .WithMany("recomendacionVideojuegoRefModels")
                        .HasForeignKey("VideojuegoReferenciaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("usuario");

                    b.Navigation("videojuegoRecomendado");

                    b.Navigation("videojuegoReferencia");
                });

            modelBuilder.Entity("Core.Domain.Models.ReseñaModel", b =>
                {
                    b.HasOne("Core.Domain.Models.VideojuegoModel", "Videojuego")
                        .WithMany("reseñaModel")
                        .HasForeignKey("Videojuego_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Videojuego");
                });

            modelBuilder.Entity("Core.Domain.Models.SteamAccountModel", b =>
                {
                    b.HasOne("Core.Domain.ApplicationModels.Users", "users")
                        .WithOne("SteamAccountModel")
                        .HasForeignKey("Core.Domain.Models.SteamAccountModel", "User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("users");
                });

            modelBuilder.Entity("Core.Domain.Models.SuscripcionUsuarioModel", b =>
                {
                    b.HasOne("Core.Domain.Models.SuscripcionModel", "Suscripcion")
                        .WithMany("suscripcionUsrdModels")
                        .HasForeignKey("Suscripcion_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.ApplicationModels.Users", "Usuario")
                        .WithOne("suscripcionUsuarioModel")
                        .HasForeignKey("Core.Domain.Models.SuscripcionUsuarioModel", "User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suscripcion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Core.Domain.Models.TiempoDeJuegoModel", b =>
                {
                    b.HasOne("Core.Domain.ApplicationModels.Users", "usuario")
                        .WithMany("tiempoDeJuegoModel")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.VideojuegoModel", "videojuego")
                        .WithMany("tiempoDeJuegoModel")
                        .HasForeignKey("Videojuego_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario");

                    b.Navigation("videojuego");
                });

            modelBuilder.Entity("Core.Domain.Models.TrofeoModel", b =>
                {
                    b.HasOne("Core.Domain.ApplicationModels.Users", "usuario")
                        .WithMany("trofeosModel")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.VideojuegoModel", "videojuego")
                        .WithMany("trofeosModel")
                        .HasForeignKey("Videojuego_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario");

                    b.Navigation("videojuego");
                });

            modelBuilder.Entity("Core.Domain.Models.UsuarioBaneadoModel", b =>
                {
                    b.HasOne("Core.Domain.ApplicationModels.Users", "usuarioAdmin")
                        .WithMany("usuarioBaneadoAdminModels")
                        .HasForeignKey("UserAdmin_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Domain.ApplicationModels.Users", "usuarioBaneado")
                        .WithMany("usuarioBaneadoModels")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("usuarioAdmin");

                    b.Navigation("usuarioBaneado");
                });

            modelBuilder.Entity("Core.Domain.Models.UsuarioJuegoPerfilModel", b =>
                {
                    b.HasOne("Core.Domain.ApplicationModels.Users", "User")
                        .WithMany("usuarioJuegoPerfilModels")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domain.Models.UsuarioVisitaModel", b =>
                {
                    b.HasOne("Core.Domain.ApplicationModels.Users", "Usuario")
                        .WithMany("usuarioVisitaModels")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.VideojuegoModel", "Videojuego")
                        .WithMany("usuarioVisitaModels")
                        .HasForeignKey("Videojuego_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");

                    b.Navigation("Videojuego");
                });

            modelBuilder.Entity("Core.Domain.Models.ValoracionModel", b =>
                {
                    b.HasOne("Core.Domain.Models.VideojuegoModel", "Videojuego")
                        .WithMany("valoracionModel")
                        .HasForeignKey("Videojuego_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Videojuego");
                });

            modelBuilder.Entity("Core.Domain.Models.VideojuegoEstiloModel", b =>
                {
                    b.HasOne("Core.Domain.Models.EstiloModel", "estiloModel")
                        .WithMany("videojuegoEstiloModels")
                        .HasForeignKey("Estilo_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.VideojuegoModel", "videojuego")
                        .WithMany("videojuegoEstiloModels")
                        .HasForeignKey("Videojuego_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("estiloModel");

                    b.Navigation("videojuego");
                });

            modelBuilder.Entity("Core.Domain.Models.VideojuegoGeneroModel", b =>
                {
                    b.HasOne("Core.Domain.Models.GeneroModel", "generoModel")
                        .WithMany("videojuegoGeneroModels")
                        .HasForeignKey("Genero_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.VideojuegoModel", "videojuego")
                        .WithMany("videojuegoGeneroModels")
                        .HasForeignKey("Videojuego_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("generoModel");

                    b.Navigation("videojuego");
                });

            modelBuilder.Entity("Core.Domain.Models.VideojuegoInteresModel", b =>
                {
                    b.HasOne("Core.Domain.ApplicationModels.Users", "usuario")
                        .WithMany("videojuegoInteresModel")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.VideojuegoModel", "videojuego")
                        .WithMany("videojuegoInteresModels")
                        .HasForeignKey("Videojuego_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario");

                    b.Navigation("videojuego");
                });

            modelBuilder.Entity("Core.Domain.Models.VideojuegoPlataformaModel", b =>
                {
                    b.HasOne("Core.Domain.Models.PlataformaModel", "plataformaModel")
                        .WithMany("videojuegoPlataformaModels")
                        .HasForeignKey("Plataforma_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.VideojuegoModel", "videojuego")
                        .WithMany("videojuegoPlataformaModels")
                        .HasForeignKey("Videojuego_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("plataformaModel");

                    b.Navigation("videojuego");
                });

            modelBuilder.Entity("Core.Domain.Models.VideojuegoTagModel", b =>
                {
                    b.HasOne("Core.Domain.Models.TagModel", "tagModel")
                        .WithMany("videojuegoTagModels")
                        .HasForeignKey("Tag_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.VideojuegoModel", "videojuego")
                        .WithMany("videojuegoTagModels")
                        .HasForeignKey("Videojuego_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tagModel");

                    b.Navigation("videojuego");
                });

            modelBuilder.Entity("Core.Domain.Models.VideojuegoTiendaModel", b =>
                {
                    b.HasOne("Core.Domain.Models.TiendaModel", "tiendaModel")
                        .WithMany("videojuegoTiendaModels")
                        .HasForeignKey("Tienda_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.VideojuegoModel", "videojuego")
                        .WithMany("videojuegoTiendaModels")
                        .HasForeignKey("Videojuego_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tiendaModel");

                    b.Navigation("videojuego");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Core.Domain.ApplicationModels.Privileges", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Domain.ApplicationModels.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Domain.ApplicationModels.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Domain.ApplicationModels.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.ApplicationModels.Users", b =>
                {
                    b.Navigation("SteamAccountModel")
                        .IsRequired();

                    b.Navigation("UserRefreshTokens");

                    b.Navigation("adquicionesModel");

                    b.Navigation("comentarioModels");

                    b.Navigation("foroModels");

                    b.Navigation("foroUsuarioFavoritoModels");

                    b.Navigation("foroUsuarioVisitaModels");

                    b.Navigation("medioDePagoModels");

                    b.Navigation("puntuacionModels");

                    b.Navigation("recomendacionUsuarioModels");

                    b.Navigation("recomendacionVideojuegoModels");

                    b.Navigation("suscripcionUsuarioModel")
                        .IsRequired();

                    b.Navigation("tiempoDeJuegoModel");

                    b.Navigation("trofeosModel");

                    b.Navigation("usuarioBaneadoAdminModels");

                    b.Navigation("usuarioBaneadoModels");

                    b.Navigation("usuarioJuegoPerfilModels");

                    b.Navigation("usuarioVisitaModels");

                    b.Navigation("videojuegoInteresModel");
                });

            modelBuilder.Entity("Core.Domain.Models.ComentarioModel", b =>
                {
                    b.Navigation("comentarioModels");

                    b.Navigation("puntuacionModels");
                });

            modelBuilder.Entity("Core.Domain.Models.EstiloModel", b =>
                {
                    b.Navigation("videojuegoEstiloModels");
                });

            modelBuilder.Entity("Core.Domain.Models.ForoModel", b =>
                {
                    b.Navigation("comentarioModels");

                    b.Navigation("foroUsuarioFavoritoModels");

                    b.Navigation("foroUsuarioVisitaModels");
                });

            modelBuilder.Entity("Core.Domain.Models.GeneroModel", b =>
                {
                    b.Navigation("videojuegoGeneroModels");
                });

            modelBuilder.Entity("Core.Domain.Models.PlataformaModel", b =>
                {
                    b.Navigation("videojuegoPlataformaModels");
                });

            modelBuilder.Entity("Core.Domain.Models.SuscripcionModel", b =>
                {
                    b.Navigation("suscripcionUsrdModels");
                });

            modelBuilder.Entity("Core.Domain.Models.TagModel", b =>
                {
                    b.Navigation("videojuegoTagModels");
                });

            modelBuilder.Entity("Core.Domain.Models.TiendaModel", b =>
                {
                    b.Navigation("videojuegoTiendaModels");
                });

            modelBuilder.Entity("Core.Domain.Models.TipoPagoModel", b =>
                {
                    b.Navigation("_mediosPagoModel");
                });

            modelBuilder.Entity("Core.Domain.Models.VideojuegoModel", b =>
                {
                    b.Navigation("adquisicionesModel");

                    b.Navigation("foroModels");

                    b.Navigation("novedadModels");

                    b.Navigation("ratingModels");

                    b.Navigation("recomendacionUsuarioModels");

                    b.Navigation("recomendacionVideojuegoRecModels");

                    b.Navigation("recomendacionVideojuegoRefModels");

                    b.Navigation("reseñaModel");

                    b.Navigation("tiempoDeJuegoModel");

                    b.Navigation("trofeosModel");

                    b.Navigation("usuarioVisitaModels");

                    b.Navigation("valoracionModel");

                    b.Navigation("videojuegoEstiloModels");

                    b.Navigation("videojuegoGeneroModels");

                    b.Navigation("videojuegoInteresModels");

                    b.Navigation("videojuegoPlataformaModels");

                    b.Navigation("videojuegoTagModels");

                    b.Navigation("videojuegoTiendaModels");
                });
#pragma warning restore 612, 618
        }
    }
}
